name: Create Branch for Task

on:
  issues:
    types: [opened, edited]

jobs:
  create-task-branch:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Check if issue is a task
        id: check-task
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            let isTask = false;
            let parentIssueTitle = '';
            
            try {
              console.log('=== Checking if Issue #' + issue.number + ' is a Task ===');
              
              // Method 1: Check timeline for parent issue connection or issue type
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              });
              
              console.log('Timeline events found:', timeline.data.length);
              
              // Check for GitHub native sub-issue events
              const hasParentIssue = timeline.data.some(event => {
                console.log('  Event:', event.event);
                return event.event === 'parent_issue_added' || 
                       event.event === 'connected' || 
                       event.event === 'issue_type_added';
              });
              
              // Check for issue type "Task" event
              const hasTaskTypeEvent = timeline.data.some(event => 
                event.event === 'issue_type_added'
              );
              
              console.log('Has parent issue event:', hasParentIssue);
              console.log('Has task type event:', hasTaskTypeEvent);
              
              // Method 2: Check issue body for manual indicators
              const issueBody = issue.body || '';
              const hasTaskIndicator = issueBody.includes('Parent issue:') || 
                                       issueBody.includes('Part of #') ||
                                       issueBody.match(/Subtask of #\d+/i);
              
              console.log('Has task indicator in body:', hasTaskIndicator);
              
              // Method 3: Check labels for "task" label
              const hasTaskLabel = issue.labels?.some(label => 
                label.name.toLowerCase() === 'task'
              );
              
              console.log('Has task label:', hasTaskLabel);
              
              // Determine if it's a task
              isTask = hasParentIssue || hasTaskTypeEvent || hasTaskIndicator || hasTaskLabel;
              
              // Get parent issue title if this is a task
              if (isTask) {
                // Try to find parent issue from timeline cross-references
                for (const event of timeline.data) {
                  if (event.source && event.source.issue) {
                    const parentIssue = event.source.issue;
                    parentIssueTitle = parentIssue.title;
                    console.log('Found parent issue:', parentIssue.number, parentIssueTitle);
                    break;
                  }
                }
                
                // If no parent found in timeline, try to parse from body
                if (!parentIssueTitle) {
                  const parentMatch = issueBody.match(/(?:Parent issue:|Part of|Subtask of)\s*#(\d+)/i);
                  if (parentMatch) {
                    try {
                      const parentNumber = parseInt(parentMatch[1]);
                      const { data: parentIssue } = await github.rest.issues.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: parentNumber
                      });
                      parentIssueTitle = parentIssue.title;
                      console.log('Found parent issue from body:', parentNumber, parentIssueTitle);
                    } catch (err) {
                      console.log('Could not fetch parent issue:', err.message);
                    }
                  }
                }
                
                console.log('âœ“ Issue #' + issue.number + ' IS A TASK!');
                console.log('  Parent issue title:', parentIssueTitle || '(not found)');
              } else {
                console.log('âœ— Issue #' + issue.number + ' is NOT a task');
              }
              
              core.setOutput('is_task', isTask.toString());
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_title', issue.title);
              core.setOutput('parent_issue_title', parentIssueTitle || '');
              
              console.log('=== FINAL RESULT: Issue #' + issue.number + ' is a task: ' + isTask + ' ===');
              
              return isTask;
            } catch (error) {
              console.log('Error checking if issue is a task:', error);
              core.setOutput('is_task', 'false');
              return false;
            }
      
      - name: Create branch for task
        if: steps.check-task.outputs.is_task == 'true'
        id: create-branch
        run: |
          ISSUE_NUMBER="${{ steps.check-task.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check-task.outputs.issue_title }}"
          PARENT_TITLE="${{ steps.check-task.outputs.parent_issue_title }}"
          
          # Sanitize the task title for branch name
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          
          # Sanitize the parent title for branch prefix
          if [ -n "$PARENT_TITLE" ]; then
            SANITIZED_PARENT=$(echo "$PARENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
            # Create branch name with parent prefix
            BRANCH_NAME="${SANITIZED_PARENT}/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
          else
            # Fallback to task prefix if no parent found
            BRANCH_NAME="task/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
          fi
          
          # Truncate if too long (max 255 chars for git branch names)
          BRANCH_NAME=$(echo "$BRANCH_NAME" | cut -c1-200)
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            # Create and push the branch
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            
            echo "Branch $BRANCH_NAME created successfully"
            echo "branch_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Link branch to issue
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            
            // Create a development link by creating a ref comment
            // This links the branch to the issue in the Development section
            const refComment = `Created branch: ${branchName}`;
            
            // GitHub automatically links branches mentioned in issue comments to the Development section
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: refComment
            });
            
            console.log('Branch linked to issue via comment');
      
      - name: Comment on issue with branch details
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const branchUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branchName}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸŒ¿ Branch created: [\`${branchName}\`](${branchUrl})\n\nYou can now start working on this task!`
            });
