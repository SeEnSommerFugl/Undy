name: Create Branch for Task

on:
  issues:
    types: [opened, edited]

jobs:
  create-task-branch:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Check if issue is a task
        id: check-task
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // Check if the issue type is "Task" (GitHub Projects v2)
            let isTask = false;
            
            try {
              const issueBody = issue.body || '';
              
              // Method 1: Check timeline for parent issue connection
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              });
              
              const hasParentConnection = timeline.data.some(event => 
                event.event === 'connected' || 
                (event.event === 'cross-referenced' && event.source?.issue)
              );
              
              // Method 2: Check for manual indicators in body
              const hasTaskIndicator = issueBody.includes('Parent issue:') || 
                                       issueBody.includes('Part of #') ||
                                       issueBody.match(/Subtask of #\d+/i) ||
                                       issueBody.match(/Task for #\d+/i);
              
              // Method 3: Check labels for "task" label
              const hasTaskLabel = issue.labels?.some(label => 
                label.name.toLowerCase() === 'task'
              );
              
              // Method 4: Use GraphQL to check issue type from Projects v2
              const graphqlQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                      number
                      title
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            title
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                  ... on ProjectV2FieldCommon {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const graphqlResult = await github.graphql(graphqlQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: issue.number
                });
                
                console.log('=== DIAGNOSTIC INFO ===');
                console.log('Issue #' + issue.number + ': ' + issue.title);
                
                const projectItems = graphqlResult.repository.issue.projectItems.nodes;
                console.log('Number of projects this issue is in:', projectItems.length);
                
                // Log all field values to see what we're getting
                for (const item of projectItems) {
                  console.log('Project:', item.project?.title || 'Unknown');
                  console.log('Field values found:');
                  const fieldValues = item.fieldValues.nodes;
                  
                  for (const fieldValue of fieldValues) {
                    if (fieldValue.field?.name) {
                      console.log(`  - Field: "${fieldValue.field.name}", Value: "${fieldValue.name || fieldValue.text || 'N/A'}"`);
                      
                      // Check for Task type (case-insensitive)
                      if (fieldValue.field.name.toLowerCase() === 'type' && 
                          fieldValue.name && 
                          fieldValue.name.toLowerCase() === 'task') {
                        isTask = true;
                        console.log('âœ“ TASK DETECTED via Projects v2 Type field!');
                      }
                    }
                  }
                }
                
                console.log('=== END DIAGNOSTIC INFO ===');
                
              } catch (graphqlError) {
                console.log('GraphQL query failed:', graphqlError.message);
              }
              
              // Fallback: If any of the other methods detected it as a task
              if (!isTask) {
                isTask = hasParentConnection || hasTaskIndicator || hasTaskLabel;
                if (isTask) {
                  console.log(`Issue detected as task via: parent=${hasParentConnection}, indicator=${hasTaskIndicator}, label=${hasTaskLabel}`);
                }
              }
              
              core.setOutput('is_task', isTask.toString());
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_title', issue.title);
              
              console.log(`FINAL RESULT: Issue #${issue.number} is a task: ${isTask}`);
              
              return isTask;
            } catch (error) {
              console.log('Error checking if issue is a task:', error);
              core.setOutput('is_task', 'false');
              return false;
            }
      
      - name: Create branch for task
        if: steps.check-task.outputs.is_task == 'true'
        id: create-branch
        run: |
          ISSUE_NUMBER="${{ steps.check-task.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check-task.outputs.issue_title }}"
          
          # Sanitize the title for branch name
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          
          # Create branch name
          BRANCH_NAME="task/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
          
          # Truncate if too long (max 255 chars for git branch names)
          BRANCH_NAME=$(echo "$BRANCH_NAME" | cut -c1-200)
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            # Create and push the branch
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            
            echo "Branch $BRANCH_NAME created successfully"
            echo "branch_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment on issue
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const branchUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branchName}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸŒ¿ Branch created: [\`${branchName}\`](${branchUrl})\n\nYou can now start working on this task!`
            });
