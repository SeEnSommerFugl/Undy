name: Create Branch for Task

on:
  issues:
    types: [opened, edited]

jobs:
  create-task-branch:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Check if issue is a task and get parent
        id: check-task
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            let isTask = false;
            let parentIssueTitle = '';
            let parentIssueNumber = null;
            
            try {
              console.log('=== Checking Issue #' + issue.number + ': ' + issue.title + ' ===');
              
              // STEP 1: Check timeline for task indicators
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                per_page: 100
              });
              
              console.log('Timeline events found:', timeline.data.length);
              
              for (const event of timeline.data) {
                if (event.event === 'parent_issue_added' || event.event === 'issue_type_added') {
                  isTask = true;
                  console.log('✓ Detected as Task via ' + event.event);
                }
                
                // Check for cross-references that might be the parent
                if (event.event === 'cross-referenced' && event.source?.issue) {
                  console.log('  Cross-reference from issue #' + event.source.issue.number);
                }
              }
              
              // STEP 2: If it's a task, look through timeline for connected events
              if (isTask) {
                console.log('Looking for parent in timeline cross-references...');
                
                for (const event of timeline.data) {
                  if (event.event === 'connected' && event.source?.issue) {
                    // This might be the parent
                    const sourceIssue = event.source.issue;
                    console.log('Found connected issue #' + sourceIssue.number + ': ' + sourceIssue.title);
                    
                    // Fetch this issue to check if it has sub-issues
                    try {
                      const { data: potentialParent } = await github.rest.issues.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: sourceIssue.number
                      });
                      
                      // If it has a title that looks like a User Story, it's likely the parent
                      if (potentialParent.title) {
                        parentIssueNumber = sourceIssue.number;
                        parentIssueTitle = sourceIssue.title;
                        console.log('✓ Found parent via connected event: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                        break;
                      }
                    } catch (err) {
                      console.log('Could not fetch connected issue:', err.message);
                    }
                  }
                }
              }
              
              // STEP 3: If still no parent, look for the most recent cross-reference from a User Story type issue
              if (isTask && !parentIssueNumber) {
                console.log('Checking cross-references for User Story parent...');
                
                for (const event of timeline.data) {
                  if (event.event === 'cross-referenced' && event.source?.issue) {
                    const sourceIssue = event.source.issue;
                    
                    // This cross-reference might be from the parent adding this as a sub-issue
                    // Assume the first cross-reference after issue creation is from the parent
                    if (!parentIssueNumber) {
                      parentIssueNumber = sourceIssue.number;
                      parentIssueTitle = sourceIssue.title;
                      console.log('✓ Using cross-reference as parent: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                      break;
                    }
                  }
                }
              }
              
              // STEP 4: Last resort - manually check specific known parent issues
              if (isTask && !parentIssueNumber) {
                console.log('Manually checking known User Story issues...');
                
                // Get all open issues and filter for ones that might be parents
                const { data: allIssues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  per_page: 100
                });
                
                // Look for issues that were created before this one and might be User Stories
                const potentialParents = allIssues.filter(i => 
                  i.number < issue.number && // Created before this issue
                  i.number !== issue.number && // Not this issue
                  (i.title.includes('CODE') || i.title.includes('DATABASE') || i.title.includes('USER')) // Likely parent names
                );
                
                console.log('Found ' + potentialParents.length + ' potential parent issues');
                
                if (potentialParents.length > 0) {
                  // Use the most recently created potential parent
                  const parent = potentialParents[potentialParents.length - 1];
                  parentIssueNumber = parent.number;
                  parentIssueTitle = parent.title;
                  console.log('✓ Using heuristic parent: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                }
              }
              
              if (isTask) {
                console.log('✓ Issue #' + issue.number + ' IS A TASK');
                console.log('  Parent: #' + (parentIssueNumber || 'unknown') + ' - ' + (parentIssueTitle || 'NOT FOUND'));
              } else {
                console.log('✗ Issue #' + issue.number + ' is NOT a task');
              }
              
              core.setOutput('is_task', isTask.toString());
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_title', issue.title);
              core.setOutput('parent_issue_title', parentIssueTitle || '');
              core.setOutput('parent_issue_number', (parentIssueNumber || '').toString());
              
              console.log('=== OUTPUT: is_task=' + isTask + ', parent="' + parentIssueTitle + '" ===');
              
              return isTask;
            } catch (error) {
              console.log('ERROR:', error);
              core.setOutput('is_task', 'false');
              return false;
            }
      
      - name: Create branch for task
        if: steps.check-task.outputs.is_task == 'true'
        id: create-branch
        run: |
          ISSUE_NUMBER="${{ steps.check-task.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check-task.outputs.issue_title }}"
          PARENT_TITLE="${{ steps.check-task.outputs.parent_issue_title }}"
          
          echo "=== Creating Branch ==="
          echo "Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
          echo "Parent: $PARENT_TITLE"
          
          # Sanitize the task title for branch name
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          
          # Sanitize the parent title for branch prefix
          if [ -n "$PARENT_TITLE" ]; then
            SANITIZED_PARENT=$(echo "$PARENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
            BRANCH_NAME="${SANITIZED_PARENT}/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
            echo "Branch name (with parent): $BRANCH_NAME"
          else
            BRANCH_NAME="task/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
            echo "Branch name (no parent): $BRANCH_NAME"
          fi
          
          # Truncate if too long
          BRANCH_NAME=$(echo "$BRANCH_NAME" | cut -c1-200)
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch already exists"
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            
            echo "✓ Branch created successfully!"
            echo "branch_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Link branch to Development section
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        continue-on-error: true
        run: |
          gh issue develop ${{ steps.check-task.outputs.issue_number }} --branch ${{ steps.create-branch.outputs.branch_name }} --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on issue with branch details
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const branchUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branchName}`;
            const parentTitle = '${{ steps.check-task.outputs.parent_issue_title }}';
            
            let message = `🌿 Branch created: [\`${branchName}\`](${branchUrl})`;
            if (parentTitle) {
              message += `\n📋 Parent: **${parentTitle}**`;
            }
            message += `\n\nYou can now start working on this task!`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
