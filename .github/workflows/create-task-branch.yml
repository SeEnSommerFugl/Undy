name: Create Branch for Task

on:
  issues:
    types: [opened, edited]

jobs:
  create-task-branch:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Check if issue is a task and get parent
        id: check-task
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            let isTask = false;
            let parentIssueTitle = '';
            let parentIssueNumber = null;
            
            try {
              console.log('=== Checking Issue #' + issue.number + ': ' + issue.title + ' ===');
              
              // STEP 1: Check timeline events for parent_issue_added
              console.log('Checking timeline for parent issue...');
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                per_page: 100
              });
              
              console.log('Timeline events found:', timeline.data.length);
              
              // Look for parent_issue_added event
              for (const event of timeline.data) {
                console.log('  Event:', event.event, event.issue ? '(issue #' + event.issue.number + ')' : '');
                
                // Check if this is a parent_issue_added event
                if (event.event === 'parent_issue_added') {
                  isTask = true;
                  // The parent issue info might be in the event data
                  if (event.issue) {
                    parentIssueNumber = event.issue.number;
                    parentIssueTitle = event.issue.title;
                    console.log('✓ Found parent from parent_issue_added event: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                  }
                }
                
                // Also check for issue_type_added (indicates it's a task)
                if (event.event === 'issue_type_added') {
                  isTask = true;
                  console.log('✓ Detected as Task via issue_type_added event');
                }
                
                // Check cross-references
                if (event.event === 'cross-referenced' && event.source?.issue) {
                  const sourceIssue = event.source.issue;
                  // Only consider it a parent if this issue appears to be a sub-issue
                  if (isTask && !parentIssueNumber) {
                    parentIssueNumber = sourceIssue.number;
                    parentIssueTitle = sourceIssue.title;
                    console.log('Found potential parent from cross-reference: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                  }
                }
              }
              
              // STEP 2: If we found it's a task but no parent details yet, use GraphQL
              if (isTask && !parentIssueNumber) {
                console.log('Trying GraphQL to find parent issue...');
                
                const graphqlQuery = `
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $number) {
                        id
                        trackedInIssues(first: 1) {
                          nodes {
                            number
                            title
                          }
                        }
                      }
                    }
                  }
                `;
                
                try {
                  const result = await github.graphql(graphqlQuery, {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    number: issue.number
                  });
                  
                  const trackedBy = result.repository.issue.trackedInIssues.nodes;
                  console.log('Issues tracking this one (parents):', trackedBy.length);
                  
                  if (trackedBy.length > 0) {
                    parentIssueNumber = trackedBy[0].number;
                    parentIssueTitle = trackedBy[0].title;
                    console.log('✓ Found parent via GraphQL: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                  }
                } catch (graphqlError) {
                  console.log('GraphQL query failed:', graphqlError.message);
                }
              }
              
              // STEP 3: Last resort - search for parent issue by looking at all open issues
              if (isTask && !parentIssueNumber) {
                console.log('Searching for parent issue among open issues...');
                
                try {
                  // Get all open issues
                  const { data: allIssues } = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'open',
                    per_page: 100
                  });
                  
                  // Look for issues that might be tracking this one
                  for (const potentialParent of allIssues) {
                    // Get timeline for each issue to see if it references this issue
                    const parentTimeline = await github.rest.issues.listEventsForTimeline({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: potentialParent.number,
                      per_page: 50
                    });
                    
                    // Check if this issue has a sub_issue_added event for our issue
                    for (const parentEvent of parentTimeline.data) {
                      if (parentEvent.event === 'sub_issue_added' && parentEvent.issue?.number === issue.number) {
                        parentIssueNumber = potentialParent.number;
                        parentIssueTitle = potentialParent.title;
                        console.log('✓ Found parent by searching issues: #' + parentIssueNumber + ' - ' + parentIssueTitle);
                        break;
                      }
                    }
                    
                    if (parentIssueNumber) break;
                  }
                } catch (searchError) {
                  console.log('Could not search for parent:', searchError.message);
                }
              }
              
              if (isTask) {
                console.log('✓ Issue #' + issue.number + ' IS A TASK');
                console.log('  Parent: #' + (parentIssueNumber || 'unknown') + ' - ' + (parentIssueTitle || 'NOT FOUND'));
              } else {
                console.log('✗ Issue #' + issue.number + ' is NOT a task');
              }
              
              core.setOutput('is_task', isTask.toString());
              core.setOutput('issue_number', issue.number.toString());
              core.setOutput('issue_title', issue.title);
              core.setOutput('parent_issue_title', parentIssueTitle || '');
              core.setOutput('parent_issue_number', (parentIssueNumber || '').toString());
              
              console.log('=== OUTPUT: is_task=' + isTask + ', parent="' + parentIssueTitle + '" ===');
              
              return isTask;
            } catch (error) {
              console.log('ERROR:', error);
              core.setOutput('is_task', 'false');
              return false;
            }
      
      - name: Create branch for task
        if: steps.check-task.outputs.is_task == 'true'
        id: create-branch
        run: |
          ISSUE_NUMBER="${{ steps.check-task.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check-task.outputs.issue_title }}"
          PARENT_TITLE="${{ steps.check-task.outputs.parent_issue_title }}"
          
          echo "=== Creating Branch ==="
          echo "Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
          echo "Parent: $PARENT_TITLE"
          
          # Sanitize the task title for branch name
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          
          # Sanitize the parent title for branch prefix
          if [ -n "$PARENT_TITLE" ]; then
            SANITIZED_PARENT=$(echo "$PARENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
            BRANCH_NAME="${SANITIZED_PARENT}/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
            echo "Branch name (with parent): $BRANCH_NAME"
          else
            BRANCH_NAME="task/${ISSUE_NUMBER}-${SANITIZED_TITLE}"
            echo "Branch name (no parent): $BRANCH_NAME"
          fi
          
          # Truncate if too long
          BRANCH_NAME=$(echo "$BRANCH_NAME" | cut -c1-200)
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Check if branch already exists
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch already exists"
            echo "branch_created=false" >> $GITHUB_OUTPUT
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            
            echo "✓ Branch created successfully!"
            echo "branch_created=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Link branch to Development section
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        continue-on-error: true
        run: |
          # Use GitHub CLI to link the branch to the issue
          gh issue develop ${{ steps.check-task.outputs.issue_number }} --branch ${{ steps.create-branch.outputs.branch_name }} --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on issue with branch details
        if: steps.check-task.outputs.is_task == 'true' && steps.create-branch.outputs.branch_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const branchUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branchName}`;
            const parentTitle = '${{ steps.check-task.outputs.parent_issue_title }}';
            
            let message = `🌿 Branch created: [\`${branchName}\`](${branchUrl})`;
            if (parentTitle) {
              message += `\n📋 Parent: **${parentTitle}**`;
            }
            message += `\n\nYou can now start working on this task!`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
